/*
 * Mars Simulation Project
 * TabPanelThermal.java
 * @date 2024-07-03
 * @author Manny Kung
 */
package com.mars_sim.ui.swing.unit_window.structure;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.util.Iterator;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

import com.mars_sim.core.Entity;
import com.mars_sim.core.structure.Settlement;
import com.mars_sim.core.structure.building.Building;
import com.mars_sim.core.structure.building.BuildingManager;
import com.mars_sim.core.structure.building.utility.heating.ElectricHeatSource;
import com.mars_sim.core.structure.building.utility.heating.HeatMode;
import com.mars_sim.core.structure.building.utility.heating.HeatSource;
import com.mars_sim.core.structure.building.utility.heating.SolarHeatingSource;
import com.mars_sim.core.structure.building.utility.heating.ThermalGeneration;
import com.mars_sim.core.structure.building.utility.heating.ThermalSystem;
import com.mars_sim.core.tool.Msg;
import com.mars_sim.ui.swing.ImageLoader;
import com.mars_sim.ui.swing.MainDesktopPane;
import com.mars_sim.ui.swing.StyleManager;
import com.mars_sim.ui.swing.unit_window.TabPanelTable;
import com.mars_sim.ui.swing.utils.AttributePanel;
import com.mars_sim.ui.swing.utils.EntityModel;

/**
 * This is a tab panel for settlement's Thermal System .
 */
@SuppressWarnings("serial")
public class TabPanelThermal extends TabPanelTable {

	// default logger.
	
	private static final String HEAT_ICON = "heat";
	
	/** The Settlement instance. */
	private Settlement settlement;
	
	/** The cache of total heat generated. */
	private double totHeatGenCache;
	/** The cache of total heat load. */
	private double totHeatLoadCache;
	/** The cache of total power generated by heat source. */	
	private double powerGenCache;
	
	/** The cache of electric heat generated. */
	private double heatGenElectricCache;
	/** The cache of fuel heat generated. */
	private double heatGenFuelCache;
	/** The cache of total heat generated. */
	private double heatGenNuclearCache;
	/** The cache of total heat generated. */
	private double heatGenSolarCache;
	
	private double effEHeatCache;
	private double effSHeatCache;
	
	private JCheckBox checkbox;
	
	/** The label of electric heat generated. */
	private JLabel heatGenElectricLabel;
	/** The label of fuel heat generated. */
	private JLabel heatGenFuelLabel;
	/** The label of nuclear heat generated. */
	private JLabel heatGenNuclearLabel;
	/** The label of solar heat generated. */
	private JLabel heatGenSolarLabel;
	
	/** The label of total heat generated. */
	private JLabel totHeatGenLabel;
	/** The label of total heat load. */
	private JLabel totHeatLoadLabel;
	
	private JLabel powerGenLabel;
	private JLabel electricEffTF;
	private JLabel solarEffTF;
	
	/** Table model for heat info. */
	private HeatTableModel heatTableModel;
	/** The settlement's Heating System */
	private ThermalSystem thermalSystem;
	
	private BuildingManager manager;

	private List<HeatSource> heatSources;
	
	private List<Building> buildings;
	
	/**
	 * Constructor.
	 * 
	 * @param unit the unit to display.
	 * @param desktop the main desktop.
	 */
	public TabPanelThermal(Settlement unit, MainDesktopPane desktop) {
		// Use the TabPanel constructor
		super(
			Msg.getString("TabPanelThermalSystem.title"), //$NON-NLS-1$
			ImageLoader.getIconByName(HEAT_ICON),
			Msg.getString("TabPanelThermalSystem.title"), //$NON-NLS-1$
			desktop
		);
		settlement = unit;
	}

	
	@Override
	protected JPanel createInfoPanel() {
		manager = settlement.getBuildingManager();
		thermalSystem = settlement.getThermalSystem();
		buildings = manager.getBuildingsWithThermal();

		JPanel topContentPanel = new JPanel();
		topContentPanel.setLayout(new BoxLayout(topContentPanel, BoxLayout.Y_AXIS));
		
		// Prepare heat info panel.
		AttributePanel heatInfoPanel = new AttributePanel(10);
		topContentPanel.add(heatInfoPanel);

		// Prepare total heat load label.
		totHeatLoadCache = thermalSystem.getTotalHeatReq();
		totHeatLoadLabel = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.totalHeatLoad"), 
				StyleManager.DECIMAL_KW.format(totHeatLoadCache),
				Msg.getString("TabPanelThermalSystem.totalHeatLoad.tooltip")); //$NON-NLS-1$

		
		// Prepare total heat gen label.
		totHeatGenCache = thermalSystem.getTotalHeatGen();
		totHeatGenLabel = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.totalHeatGen"), 
							StyleManager.DECIMAL_KW.format(totHeatGenCache),
							Msg.getString("TabPanelThermalSystem.totalHeatGen.tooltip")); //$NON-NLS-1$
		
		// Prepare solar heat gen label.
		heatGenSolarCache = thermalSystem.getHeatGenSolar();
		heatGenSolarLabel = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.heatGenSolar"), 
							StyleManager.DECIMAL_KW.format(heatGenSolarCache),
							Msg.getString("TabPanelThermalSystem.heatGenSolar.tooltip")); //$NON-NLS-1$

		// Prepare nuclear heat gen label.
		heatGenNuclearCache = thermalSystem.getHeatGenNuclear();
		heatGenNuclearLabel = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.heatGenNuclear"), 
							StyleManager.DECIMAL_KW.format(heatGenNuclearCache),
							Msg.getString("TabPanelThermalSystem.heatGenNuclear.tooltip")); //$NON-NLS-1$

		// Prepare electric heat gen label.
		heatGenElectricCache = thermalSystem.getHeatGenElectric();
		heatGenElectricLabel = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.heatGenElectric"), 
							StyleManager.DECIMAL_KW.format(heatGenElectricCache),
							Msg.getString("TabPanelThermalSystem.heatGenElectric.tooltip")); //$NON-NLS-1$

		// Prepare fuel heat gen label.
		heatGenFuelCache = thermalSystem.getHeatGenFuel();
		heatGenFuelLabel = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.heatGenFuel"), 
							StyleManager.DECIMAL_KW.format(heatGenFuelCache),
							Msg.getString("TabPanelThermalSystem.heatGenFuel.tooltip")); //$NON-NLS-1$

		effEHeatCache = getAverageEfficiencyElectricHeat();
		electricEffTF = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.electricHeatingEfficiency"),
							StyleManager.DECIMAL_PERC.format(effEHeatCache*100D),
							Msg.getString("TabPanelThermalSystem.electricHeatingEfficiency.tooltip")); //$NON-NLS-1$

		effSHeatCache =  getAverageEfficiencySolarHeating();
		solarEffTF = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.solarHeatingEfficiency"),
							StyleManager.DECIMAL_PERC.format(effSHeatCache*100D),			
							Msg.getString("TabPanelThermalSystem.solarHeatingEfficiency.tooltip")); //$NON-NLS-1$		

		// Prepare degradation rate label.
		double degradRate = SolarHeatingSource.DEGRADATION_RATE_PER_SOL;
		heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.degradRate"),
							StyleManager.DECIMAL_PERC.format(degradRate*100D),
							Msg.getString("TabPanelThermalSystem.degradRate.tooltip")); //$NON-NLS-1$	

		// Prepare power generated label.
		powerGenCache = thermalSystem.getTotalPowerGen();
		powerGenLabel = heatInfoPanel.addTextField(Msg.getString("TabPanelThermalSystem.totalPowerGen"),
							StyleManager.DECIMAL_KW.format(powerGenCache),
							Msg.getString("TabPanelThermalSystem.totalPowerGen.tooltip")); //$NON-NLS-1$


		// Create override check box panel.
		JPanel checkboxPane = new JPanel(new FlowLayout(FlowLayout.CENTER));
		topContentPanel.add(checkboxPane, BorderLayout.SOUTH);
		
		// Create override check box.
		checkbox = new JCheckBox(Msg.getString("TabPanelThermalSystem.checkbox.value")); //$NON-NLS-1$
		checkbox.setToolTipText(Msg.getString("TabPanelThermalSystem.checkbox.tooltip")); //$NON-NLS-1$
		checkbox.addActionListener(e -> setNonGenerating(checkbox.isSelected()));
		checkbox.setSelected(false);
		checkboxPane.add(checkbox);
		
		return topContentPanel;
	}

	@Override
	protected TableModel createModel() {
		// Prepare thermal control table model.
		heatTableModel = new HeatTableModel(settlement);
		return heatTableModel;
	}

	@Override
	protected void setColumnDetails(TableColumnModel heatColumns) {

		heatColumns.getColumn(0).setPreferredWidth(10);
		heatColumns.getColumn(1).setPreferredWidth(130);
		heatColumns.getColumn(2).setPreferredWidth(30);
		heatColumns.getColumn(3).setPreferredWidth(55);
		heatColumns.getColumn(4).setPreferredWidth(55);
		heatColumns.getColumn(5).setPreferredWidth(40);
		
		DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
		renderer.setHorizontalAlignment(SwingConstants.RIGHT);
		heatColumns.getColumn(2).setCellRenderer(renderer);
		heatColumns.getColumn(3).setCellRenderer(renderer);
		heatColumns.getColumn(4).setCellRenderer(renderer);
		heatColumns.getColumn(5).setCellRenderer(renderer);
	}

	/**
	 * Sets if non-generating buildings should be shown.
	 * 
	 * @param value true or false.
	 */
	private void setNonGenerating(boolean value) {
		if (value)
			buildings = manager.getSortedBuildings();
		else
			buildings = manager.getBuildingsWithThermal();
		
		heatTableModel.fireTableDataChanged();
	}

	/**
	 * Gets average solar heating thermal efficiency.
	 * 
	 * @return
	 */
	public double getAverageEfficiencySolarHeating() {
		double effSolar = 0;
		int i = 0;
		Iterator<Building> iHeat = manager.getBuildingsWithThermal().iterator();
		while (iHeat.hasNext()) {
			Building building = iHeat.next();
			heatSources = building.getThermalGeneration().getHeatSources();
			Iterator<HeatSource> j = heatSources.iterator();
			while (j.hasNext()) {
				HeatSource heatSource = j.next();
				if (heatSource instanceof SolarHeatingSource source) {
					i++;
					effSolar += source.getThermalEfficiency();
				}
			}
		}
		// get the average eff
		if (i > 0) {
			effSolar = effSolar / i;
		}
		return effSolar;
	}

	/**
	 * Gets average electric heating thermal efficiency.
	 * 
	 * @return
	 */
	public double getAverageEfficiencyElectricHeat() {

		double effElectric = 0;
		int i = 0;
		Iterator<Building> iHeat = manager.getBuildingsWithThermal().iterator();
		while (iHeat.hasNext()) {
			Building building = iHeat.next();
			heatSources = building.getThermalGeneration().getHeatSources();
			Iterator<HeatSource> j = heatSources.iterator();
			while (j.hasNext()) {
				HeatSource heatSource = j.next();
				if (heatSource instanceof ElectricHeatSource source) {
					i++;
					effElectric += source.getThermalEfficiency();
				}
			}
		}
		// get the average eff
		if (i > 0) {
			effElectric = effElectric / i;
		}
		return effElectric;
		
	}

	/**
	 * Updates the info on this panel.
	 */
	@Override
	public void update() {

		double heat = thermalSystem.getTotalHeatGen();
		if (totHeatGenCache != heat) {
			totHeatGenCache = heat;
			totHeatGenLabel.setText(
					StyleManager.DECIMAL_KW.format(heat)
				);
		}

		double heatLoad = thermalSystem.getTotalHeatReq();
		if (totHeatLoadCache != heatLoad) {
			totHeatLoadCache = heatLoad;
			totHeatLoadLabel.setText(
					StyleManager.DECIMAL_KW.format(heatLoad)
				);
		}
		
		double heatGenElectric = thermalSystem.getHeatGenElectric();
		if (heatGenElectricCache != heatGenElectric) {
			heatGenElectricCache = heatGenElectric;
			heatGenElectricLabel.setText(
					StyleManager.DECIMAL_KW.format(heatGenElectric)
				);
		}
		
		double heatGenFuel = thermalSystem.getHeatGenFuel();
		if (heatGenFuelCache != heatGenFuel) {
			heatGenFuelCache = heatGenFuel;
			heatGenFuelLabel.setText(
					StyleManager.DECIMAL_KW.format(heatGenFuel)
				);
		}
		
		double heatGenNuclear = thermalSystem.getHeatGenNuclear();
		if (heatGenNuclearCache != heatGenNuclear) {
			heatGenNuclearCache = heatGenNuclear;
			heatGenNuclearLabel.setText(
					StyleManager.DECIMAL_KW.format(heatGenNuclear)
				);
		}
		
		double heatGenSolar = thermalSystem.getHeatGenSolar();
		if (heatGenSolarCache != heatGenSolar) {
			heatGenSolarCache = heatGenSolar;
			heatGenSolarLabel.setText(
					StyleManager.DECIMAL_KW.format(heatGenSolar)
				);
		}
		
		
		double power = thermalSystem.getTotalPowerGen(); 
		if (powerGenCache != power) {
			powerGenCache = power;
			powerGenLabel.setText(
					StyleManager.DECIMAL_KW.format(power)
				);
		}

		double eheat = getAverageEfficiencyElectricHeat()*100D;
		if (effEHeatCache != eheat) {
			effEHeatCache = eheat;
			electricEffTF.setText(
					StyleManager.DECIMAL_PERC.format(eheat)
				);
		}

		double esheat = getAverageEfficiencySolarHeating()*100D;
		if (effSHeatCache != esheat) {
			effSHeatCache = esheat;
			solarEffTF.setText(
					StyleManager.DECIMAL_PERC.format(esheat)
				);
		}

		// Update thermal control table.
		heatTableModel.update();
	}

	/**
	 * Internal class used as model for the thermal control table.
	 */
	private class HeatTableModel extends AbstractTableModel
		implements EntityModel {

		/** default serial id. */
		private static final long serialVersionUID = 1L;

		private Icon dotRed;
		private Icon dotYellow;
		private Icon dotGreen_full, dotGreen_half, dotGreen_quarter, dotGreen_threeQuarter;

		private HeatTableModel(Settlement settlement) {
			dotRed = ImageLoader.getIconByName("dot/red"); 
			dotYellow = ImageLoader.getIconByName("dot/yellow"); 
			dotGreen_full = ImageLoader.getIconByName("dot/green"); 
			dotGreen_half = ImageLoader.getIconByName("dot/green_half"); 
			dotGreen_quarter = ImageLoader.getIconByName("dot/green_quarter"); 
			dotGreen_threeQuarter = ImageLoader.getIconByName("dot/green_three_quarter");
		}

		public int getRowCount() {
			return buildings.size();
		}

		public int getColumnCount() {
			return 6;
		}
		
		@Override
		public Class<?> getColumnClass(int columnIndex) {
			return switch(columnIndex) {
				case 0 -> Icon.class;
				case 1 -> Building.class;
				default -> Double.class;
			};
		}

		@Override
		public String getColumnName(int columnIndex) {
			return switch(columnIndex) {
				case 0 -> Msg.getString("TabPanelThermalSystem.column.s"); //$NON-NLS-1$
				case 1 -> Msg.getString("TabPanelThermalSystem.column.building"); //$NON-NLS-1$
				case 2 -> Msg.getString("TabPanelThermalSystem.column.temperature"); //$NON-NLS-1$
				case 3 -> Msg.getString("TabPanelThermalSystem.column.heat.gen"); //$NON-NLS-1$
				case 4 -> Msg.getString("TabPanelThermalSystem.column.heat.load"); //$NON-NLS-1$
				case 5 -> Msg.getString("TabPanelThermalSystem.column.heat.cap"); //$NON-NLS-1$
				default -> null;
			};
		}

		public Object getValueAt(int row, int column) {

			Building building = buildings.get(row);
	
			ThermalGeneration heater = building.getThermalGeneration();

			// if the building has thermal control system, 
			// display the following columns: 
			
			if (column == 0) {
				
				double heatReq = building.getHeatRequired();
				double heatCap = 0.0;
				double percentReq = 0;
				
				if (heater == null) {
					return null;
				}
				else {
					heatCap = building.getThermalGeneration().getHeatGenerationCapacity();	
					percentReq = heatReq / heatCap * 100;
				}
				
				List<HeatMode> ALL_HEAT_MODES = HeatMode.ALL_HEAT_MODES;
				int size = ALL_HEAT_MODES.size();
				HeatMode heatMode = null;
				
				for (int i=1; i<size && heatMode != null; i++) {
					HeatMode hm = ALL_HEAT_MODES.get(i);
					double percentageHeat = hm.getPercentage();
						
					if (percentReq >= percentageHeat) {
						heatMode = hm;	
					}
				}
				
				if (heatMode == HeatMode.HEAT_OFF) {
					return dotYellow; 
				}
				else if (heatMode == HeatMode.ONE_EIGHTH_HEAT) {
					return dotGreen_quarter;
				}
				else if (heatMode == HeatMode.QUARTER_HEAT) {
					return dotGreen_quarter;
				}
				else if (heatMode == HeatMode.THREE_EIGHTH_HEAT
						|| heatMode == HeatMode.HALF_HEAT) {
					return dotGreen_half;
				}
				else if (heatMode == HeatMode.FIVE_EIGHTH_HEAT
						|| heatMode == HeatMode.THREE_QUARTER_HEAT) {
					return dotGreen_threeQuarter;
				}
				else if (heatMode == HeatMode.SEVEN_EIGHTH_HEAT
						|| heatMode == HeatMode.FULL_HEAT) {
					return dotGreen_full;
				}
				else if (heatMode == HeatMode.OFFLINE) {
					return dotRed;
				}
				else return null;
			}
			else if (column == 1)
				return buildings.get(row);
			else if (column == 2)
				return  Math.round(building.getCurrentTemperature() * 100.0)/100.0;
			else if (column == 3) {
//				if (heatMode == HeatMode.HEAT_OFF
//					|| heatMode == HeatMode.OFFLINE) {
//					return 0.0;
//				}			

				if (heater != null) {
					return Math.round(heater.getGeneratedHeat() * 100.0)/100.0;
				}
				else
					return null;
			}
			else if (column == 4) {

				if (heater != null) {
					return Math.round(heater.getHeatRequired() * 100.0)/100.0;
				}
				else
					return 0;
			}
			else if (column == 5) {
				double generatedCapacity = 0;
				try {
					generatedCapacity = building.getThermalGeneration().getHeatGenerationCapacity();
				}
				catch (Exception e) {}
				return generatedCapacity;
			}
			return null;
		}

		public void update() {

	    	int numRow = getRowCount();
	    	int numCol = getColumnCount();
	    	for (int i=0; i<numRow; i++) {	
	    		for (int j=0; j<numCol; j++) {	
		    		if (j != 1 || j != 5)
		    			fireTableCellUpdated(i, j);
	    		}
	    	}
		}

		@Override
		public Entity getAssociatedEntity(int row) {
			return buildings.get(row);
		}
	}
	
	/**
	 * Prepares object for garbage collection.
	 */
	@Override
	public void destroy() {
		super.destroy();
		
		checkbox = null;
		totHeatGenLabel = null;
		powerGenLabel = null;
		electricEffTF = null;
		solarEffTF = null;
		heatTableModel = null;
		thermalSystem = null;
		settlement = null;
		manager = null;
		heatSources = null;
		buildings = null;
	}
}
