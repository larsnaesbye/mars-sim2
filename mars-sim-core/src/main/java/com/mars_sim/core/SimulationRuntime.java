/*
 * Mars Simulation Project
 * SimulationFiles.java
 * @date 2022-06-17
 * @author Barry Evans
 */
package com.mars_sim.core;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.io.FileUtils;

import com.mars_sim.core.map.common.FileLocator;
import com.mars_sim.core.tool.Msg;

/**
 * A singleton that represents the runtimeenvironment of the Simulation.
 */
public class SimulationRuntime {
	
	/** default logger. */
	private static final Logger logger = Logger.getLogger(SimulationRuntime.class.getName());

	private static final String USERCONFIG_DIR = "conf";
	private static final String HOME_DIR = ".mars-sim";
	private static final String SAVE_DIR = "saved";
	private static final String XML_DIR = "xml";
	private static final String AUTOSAVE_DIR = "autosave";
	private static final String LOG_DIR = "logs";

	// Name of the file generated by the Maven build
	private static final String VERSION_PROPERTIES = "version.properties";

	public static final Version VERSION;

	private static String dataDir = null;

	// Load the properties file
	static {
		setDataDir(System.getProperty("user.home") + File.separator + HOME_DIR);

		ClassLoader loader = Version.class.getClassLoader();
		InputStream stream = loader.getResourceAsStream(VERSION_PROPERTIES);

		Version found = null;
		if (stream != null) {
			try {
				found = Version.fromStream(stream);
			}
			catch(IOException ioe) {
				logger.log(Level.SEVERE, "Problem loading default version", ioe);
			}
		}

		// Catch all
		if (found == null) {
			found = new Version("Unknown", "Unknown", false);
		}
		VERSION = found;
	}

	/** # of thread(s). */
	public static final int NUM_CORES = Runtime.getRuntime().availableProcessors();
	/** OS string. */
	public static final String OS = System.getProperty("os.name"); 
	/** Java version string. */
	private static final String JAVA_TAG = System.getProperty("java.version");
	/** Java version string. */
	private static final String JAVA_VERSION = "Java " + (JAVA_TAG.contains("(") ?
			JAVA_TAG.substring(0, JAVA_TAG.indexOf("(") - 1) : JAVA_TAG);
	/** OS architecture string. */
	private static final String OS_ARCH = (System.getProperty("os.arch").contains("64") ? "64-bit" : "32-bit");
	public static final String TITLE = Msg.getString("Simulation.title", VERSION.getDescription()
			+ " - " + OS_ARCH + " " + JAVA_VERSION + " - " + NUM_CORES
			+ ((NUM_CORES == 1) ? " Core" : " Cores")); 

	/**
	 * Private constructor prevents instantiation.
	 */
	private SimulationRuntime() {
	}
	
	public static void setDataDir(String newDir) {
		dataDir = newDir;
		FileLocator.setBaseDir(newDir);
	}
	
	public static String getDataDir() {
		return dataDir;
	}
	
	public static String getUserConfigDir() {
		return dataDir + File.separator + USERCONFIG_DIR;
	}
	
	public static String getSaveDir() {
		return dataDir + File.separator + SAVE_DIR;
	}
	
	public static String getXMLDir() {
		return dataDir + File.separator + XML_DIR;
	}
	
	public static String getAutoSaveDir() {
		return dataDir + File.separator + AUTOSAVE_DIR;
	}

	public static String getLogDir() {
		return dataDir + File.separator + LOG_DIR;
	}

	/**
	 * Purges any old files from a directory.
	 * @param dir Directory to scan
	 * @param retianedCount Number of files to retain.
	 * @param extension Optional file extension to filter file list
	 */
    public static void purgeOldFiles(String dir, int retainedCount, String extension) {
		File[] files = (new File(dir)).listFiles((d, name) -> (extension == null)
																|| name.endsWith(extension));
		Arrays.sort(files, Comparator.comparingLong(File::lastModified).reversed());

		for (int i = retainedCount; i < files.length; i++) {
			File child = files[i];

			try {
				if (child.isDirectory()) {
					FileUtils.deleteDirectory(child);
				}
				else {
					Files.delete(child.toPath());
				}
			}
			catch(Exception e) {
				logger.log(Level.WARNING, "Failed to remove old file " + child, e);
			}
		}
    }
}
