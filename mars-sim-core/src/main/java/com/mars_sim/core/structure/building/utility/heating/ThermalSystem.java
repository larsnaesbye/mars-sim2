/*
 * Mars Simulation Project
 * ThermalSystem.java
 * @date 2024-07-04
 * @author Manny Kung
 */
package com.mars_sim.core.structure.building.utility.heating;

import java.io.Serializable;
import java.util.Iterator;

import com.mars_sim.core.UnitEventType;
import com.mars_sim.core.structure.Settlement;
import com.mars_sim.core.structure.building.Building;
import com.mars_sim.core.structure.building.BuildingException;
import com.mars_sim.core.structure.building.BuildingManager;
import com.mars_sim.core.structure.building.function.FunctionType;
import com.mars_sim.core.time.ClockPulse;
import com.mars_sim.core.time.Temporal;

/**
 * This class is the settlement's Thermal Control, Distribution and Storage Subsystem.
 */
public class ThermalSystem
implements Serializable, Temporal {

	/** default serial id. */
	private static final long serialVersionUID = 1L;

	/** default logger. */
	// May add back SimLogger logger = SimLogger.getLogger(ThermalSystem.class.getName());

	// Data members
	private double totalPowerGenCache;

	private double heatGenSolarCache;
	private double heatGenFuelCache;
	private double heatGenElectricCache;
	private double heatGenNuclearCache;
	
	private double heatStored;

	private double totalHeatReqCache;
	
	private double heatValue;

	private Settlement settlement;

	private BuildingManager manager;
	
	/**
	 * Constructor.
	 */
	public ThermalSystem(Settlement settlement) {

		this.settlement = settlement;
		this.manager = settlement.getBuildingManager();

		heatStored = 0D;
		totalHeatReqCache = 0D;
	}

	
	/**
	 * Gets the total generated heat in the heating system.
	 * 
	 * @return heat in kW
	 */
	public double getTotalHeatGen() {
		return heatGenSolarCache + heatGenElectricCache 
				+ heatGenFuelCache + heatGenNuclearCache;
	}

	/**
	 * Gets the electric generated heat in the heating system.
	 * 
	 * @return heat in kW
	 */
	public double getHeatGenElectric() {
		return heatGenElectricCache;
	}
	
	/**
	 * Gets the fuel generated heat in the heating system.
	 * 
	 * @return heat in kW
	 */
	public double getHeatGenFuel() {
		return heatGenFuelCache;
	}
	
	/**
	 * Gets the nuclear generated heat in the heating system.
	 * 
	 * @return heat in kW
	 */
	public double getHeatGenNuclear() {
		return heatGenNuclearCache;
	}
	
	/**
	 * Gets the solar generated heat in the heating system.
	 * 
	 * @return heat in kW
	 */
	public double getHeatGenSolar() {
		return heatGenSolarCache;
	}
	
	/**
	 * Gets the total power generated in the heating system.
	 * 
	 * @return heat in kW
	 */
	public double getTotalPowerGen() {
		return totalPowerGenCache;
	}

	/**
	 * Gets the total heat required from the heating system.
	 * 
	 * @return heat in kW
	 */
	public double getTotalHeatReq() {
		return totalHeatReqCache;
	}

	/**
	 * Time passing for heating system.
	 * 
	 * @param time amount of time passing (in millisols)
	 */
	@Override
	public boolean timePassing(ClockPulse pulse) {

		// update the total heat generated in the heating system.
		updateHeatGen();

		// Update heat value.
		determineHeatValue();

		return true;
	}

	/**
	 * Updates the heat generated from each respective heat source.
	 * 
	 * @throws BuildingException if error determining total heat generated.
	 */
	private void updateHeatGen() {
		double heatRequired = 0;
		double powerGen = 0;
		
		double heatGenElectric = 0;
		double heatGenFuel = 0;
		double heatGenSolar = 0;
		double heatGenNuclear = 0;
		
		// Add the heat generated by all heat generation buildings.
		Iterator<Building> iHeat = manager.getBuildingSet(FunctionType.THERMAL_GENERATION).iterator();
		while (iHeat.hasNext()) {
			ThermalGeneration gen = iHeat.next().getThermalGeneration();
			if (gen == null) {
				return;
			}
	
			heatGenElectric += gen.getElectricHeat();
			heatGenFuel += gen.getFuelHeat();
			heatGenSolar += gen.getSolarHeat();
			heatGenNuclear += gen.getNuclearHeat();
			
			heatRequired += gen.getHeatRequired();
			
			powerGen += gen.getElectricPowerGen() 
					+ gen.getFuelPowerGen()
					+ gen.getSolarPowerGen()
					+ gen.getNuclearPowerGen();
		}
		
		heatGenElectricCache = heatGenElectric;
		heatGenFuelCache = heatGenFuel;
		heatGenSolarCache = heatGenSolar;
		heatGenNuclearCache = heatGenNuclear;
		
		totalHeatReqCache = heatRequired;
		totalPowerGenCache = powerGen;
		
//		settlement.fireUnitUpdate(UnitEventType.GENERATED_HEAT_EVENT);
	}

	/**
	 * Determines the value of heat energy at the settlement.
	 */
	private void determineHeatValue() {
		double demand = getTotalHeatReq();
		double supply = getTotalHeatGen() + (heatStored / 2D);

		double newHeatValue = demand / (supply + 1.0D);

		if (newHeatValue != heatValue) {
			heatValue = newHeatValue;
			settlement.fireUnitUpdate(UnitEventType.HEAT_VALUE_EVENT);
		}
	}

	/**
	 * Prepares object for garbage collection.
	 */
	public void destroy() {
		manager = null;
		settlement = null;
	}
}
